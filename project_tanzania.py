'''# -*- coding: utf-8 -*-
"""Project_Tanzania.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U_F6BkKkbrbS_sC6QVFqNio6cMNp1jBt
"""

# Climate Change Analysis in Tanzania

#  1. Install & Import Necessary Libraries
!pip install pandas numpy matplotlib seaborn scikit-learn --quiet



# Import Necessary Libraries
import pandas as pd # load data
import numpy as np # for numeric Processing
import matplotlib.pyplot as plt # visualization
import seaborn as sns # Visualization
from sklearn.model_selection import train_test_split # Machine Learning model
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error
from statsmodels.tsa.seasonal import seasonal_decompose # plot time series data

# Generating mock climate data from 1980 to 2025
np.random.seed(42)
years = np.arange(1980, 2025)
temperature = 22 + 0.03 * (years - 1980) + np.random.normal(0, 0.5, len(years))
precipitation = 800 + 2 * (years - 1980) + np.random.normal(0, 30, len(years))

df = pd.DataFrame({
    'Year': years,
    'Average_Temperature_C': temperature,
    'Annual_Precipitation_mm': precipitation
})

# Save mock data to CSV
df.to_csv('tanzania_climate_data.csv', index=False)

# 3. Load and Preview the Dataset
df = pd.read_csv('tanzania_climate_data.csv')
print(df.head(18))

#  4. Data Preprocessing
df['Year'] = pd.to_datetime(df['Year'], format='%Y')
df.set_index('Year', inplace=True)

# Check for missing values
print("\nMissing values:\n", df.isnull().sum())

#  5. Exploratory Data Analysis (EDA)

# Descriptive statistics
print("\nDescriptive Statistics:\n", df.describe())

#  5. Exploratory Data Analysis (EDA)

# Descriptive statistics
print("\nDescriptive Statistics:\n", df.describe())

# Line plots
plt.figure(figsize=(12, 6))
plt.plot(df.index.year, df['Average_Temperature_C'], label='Avg Temp (°C)', color='green')
plt.title('Climate Trends in Tanzania (1980–2025)')
plt.xlabel('Year')
plt.ylabel('Value')
plt.legend()
plt.grid()
plt.show()

# Line plots
plt.figure(figsize=(12, 6))

plt.plot(df.index.year, df['Annual_Precipitation_mm'], label='Precipitation (mm)', color='blue')
plt.title('Climate Trends in Tanzania (1980–2025)')
plt.xlabel('Year')
plt.ylabel('Value')
plt.legend()
plt.grid()
plt.show()

# Heatmap for correlation
plt.figure(figsize=(6, 4))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title("Correlation Matrix")
plt.show()

# Seasonal decomposition (on temperature)
result = seasonal_decompose(df['Average_Temperature_C'], model='additive', period=5)
result.plot()
plt.suptitle("Seasonal Decomposition of Avg Temperature")
plt.show()

"""#  6. Machine Learning Modeling"""

# Use year as numeric feature
df_ml = df.copy()
df_ml['Year'] = df_ml.index.year

X = df_ml[['Year']]
y_temp = df_ml['Average_Temperature_C']
y_prec = df_ml['Annual_Precipitation_mm']

# Split data
X_train, X_test, y_temp_train, y_temp_test = train_test_split(X, y_temp, test_size=0.2, random_state=42)

# Linear Regression Model for Temperature
model_1 = LinearRegression()
model_1.fit(X_train, y_temp_train)
temp_pred = model_1.predict(X_test)

#  7. Evaluation
def evaluate_model(y_true, y_pred, model_name):
    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
    mae = mean_absolute_error(y_true, y_pred)
    print(f"{model_name} Evaluation:")
    print(f" - RMSE: {rmse:.2f}")
    print(f" - MAE: {mae:.2f}")
    print()

evaluate_model(y_temp_test, temp_pred, "Linear Regression")

# Random Forest for comparison
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_temp_train)
rf_pred = rf_model.predict(X_test)



evaluate_model(y_temp_test, temp_pred, "Linear Regression")
evaluate_model(y_temp_test, rf_pred, "Random Forest Regressor")

#  8. Predict Future Climate (2021–2030)
future_years = pd.DataFrame({'Year': np.arange(2026, 2031)})
future_temp_pred = rf_model.predict(future_years)
future_temp_pred

#  Plotting Predictions
plt.figure(figsize=(10, 5))
plt.plot(df.index.year, df['Average_Temperature_C'], label='Historical Temp', color='green')
plt.plot(future_years['Year'], future_temp_pred, label='Predicted Temp (2025-2030)', color='orange')
plt.title("Temperature Forecast for Tanzania")
plt.xlabel("Year")
plt.ylabel("Temperature (°C)")
plt.legend()
plt.grid()
plt.show()

# Climate Change Analysis in Tanzania

#  1. Install & Import Necessary Libraries
!pip install pandas numpy matplotlib seaborn scikit-learn --quiet
 # Import Necessary Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error
from statsmodels.tsa.seasonal import seasonal_decompose

#  2. Sample Data Creation (can be replaced with real-world data)
# You can use real data from: https://climateknowledgeportal.worldbank.org/country/tanzania or NOAA

# Generating mock climate data from 1980 to 2020
np.random.seed(42)
years = np.arange(1980, 2025)
temperature = 22 + 0.03 * (years - 1980) + np.random.normal(0, 0.5, len(years))
precipitation = 800 + 2 * (years - 1980) + np.random.normal(0, 30, len(years))

df = pd.DataFrame({
    'Year': years,
    'Average_Temperature_C': temperature,
    'Annual_Precipitation_mm': precipitation
})

# Save mock data to CSV
df.to_csv('tanzania_climate_data.csv', index=False)

# 3. Load and Preview the Dataset
df = pd.read_csv('tanzania_climate_data.csv')
print(df.head())

#  4. Data Preprocessing
df['Year'] = pd.to_datetime(df['Year'], format='%Y')
df.set_index('Year', inplace=True)

# Check for missing values
print("\nMissing values:\n", df.isnull().sum())

#  5. Exploratory Data Analysis (EDA)

# Descriptive statistics
print("\nDescriptive Statistics:\n", df.describe())

# Line plots
plt.figure(figsize=(12, 6))
plt.plot(df.index.year, df['Average_Temperature_C'], label='Avg Temp (°C)', color='red')
plt.plot(df.index.year, df['Annual_Precipitation_mm'], label='Precipitation (mm)', color='blue')
plt.title('Climate Trends in Tanzania (1980–2020)')
plt.xlabel('Year')
plt.ylabel('Value')
plt.legend()
plt.grid()
plt.show()

# Heatmap for correlation
plt.figure(figsize=(6, 4))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title("Correlation Matrix")
plt.show()

# Seasonal decomposition (on temperature)
result = seasonal_decompose(df['Average_Temperature_C'], model='additive', period=5)
result.plot()
plt.suptitle("Seasonal Decomposition of Avg Temperature")
plt.show()

#  6. Machine Learning Modeling

# Use year as numeric feature
df_ml = df.copy()
df_ml['Year'] = df_ml.index.year

X = df_ml[['Year']]
y_temp = df_ml['Average_Temperature_C']
y_prec = df_ml['Annual_Precipitation_mm']

# Split data
X_train, X_test, y_temp_train, y_temp_test = train_test_split(X, y_temp, test_size=0.2, random_state=42)

# Linear Regression Model for Temperature
lr_model = LinearRegression()
lr_model.fit(X_train, y_temp_train)
temp_pred = lr_model.predict(X_test)

# Random Forest for comparison
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_temp_train)
rf_pred = rf_model.predict(X_test)

#  7. Evaluation
def evaluate_model(y_true, y_pred, model_name):
    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
    mae = mean_absolute_error(y_true, y_pred)
    print(f"{model_name} Evaluation:")
    print(f" - RMSE: {rmse:.2f}")
    print(f" - MAE: {mae:.2f}")
    print()

evaluate_model(y_temp_test, temp_pred, "Linear Regression")
evaluate_model(y_temp_test, rf_pred, "Random Forest Regressor")

#  8. Predict Future Climate (2021–2030)
future_years = pd.DataFrame({'Year': np.arange(2021, 2031)})
future_temp_pred = rf_model.predict(future_years)

#  Plotting Predictions
plt.figure(figsize=(10, 5))
plt.plot(df.index.year, df['Average_Temperature_C'], label='Historical Temp', color='green')
plt.plot(future_years['Year'], future_temp_pred, label='Predicted Temp (2021-2030)', color='orange')
plt.title("Temperature Forecast for Tanzania")
plt.xlabel("Year")
plt.ylabel("Temperature (°C)")
plt.legend()
plt.grid()
plt.show()
'''
# Climate Change Analysis in Tanzania
# ===================================

# SECTION 1: Install & Import Libraries
!pip install -q seaborn statsmodels

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import requests
from io import StringIO
from datetime import datetime
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from statsmodels.tsa.seasonal import seasonal_decompose

# SECTION 2: Data Collection
# Source: Berkeley Earth Monthly Data (Sample CSV)

#url = 'https://raw.githubusercontent.com/datasets/global-temp/master/data/monthly.csv'
#response = requests.get(url)

# add if you want add from colab
data = pd.read_csv(StringIO(response.text))
# For Nashon
# data = pd.read_csv("nashon.csv")
data = pd.read_csv("POWER_Regional_Monthly_1984_2024 -Earth_Skin_Temperature.csv")

# **Inspect the data immediately after reading**
print("DataFrame columns after reading CSV:", data.columns.tolist())
print("First 5 rows of the DataFrame after reading CSV:")
print(data.head())


# Ensure the required columns are present
required_cols = ['Year', 'Mean'] # Corrected required columns

# Select only required columns
if all(col in data.columns for col in required_cols):
    data = data[required_cols].copy()

    # Tanzania not available separately in this dataset, using 'Mean' as a proxy for global average or a region if available
    # If 'Country' was available and relevant, we would filter here, e.g., data = data[data['Country'] == 'Africa']

    # Rename and convert columns
    data['Year'] = pd.to_datetime(data['Year']) # Convert 'Year' column to datetime
    data.rename(columns={'Year': 'Date', 'Mean': 'Temperature'}, inplace=True) # Rename 'Year' to 'Date' and 'Mean' to 'Temperature'

    # Select only relevant columns after filtering and renaming
    data = data[['Date', 'Temperature']]

    print("DataFrame shape after selecting Date and Temperature:", data.shape)


    # SECTION 3: Data Preprocessing
    data.dropna(inplace=True)

    # Resample to monthly average to handle potential duplicate dates from different sources
    data = data.set_index('Date').resample('MS').mean().reset_index()

    data['Year'] = data['Date'].dt.year
    data['Month'] = data['Date'].dt.month
    data['Season'] = data['Month'].apply(lambda x: 'Dry' if x in [6,7,8,9] else 'Wet')

    # SECTION 4: Exploratory Data Analysis
    plt.figure(figsize=(14, 6))
    plt.plot(data['Date'], data['Temperature'], label='Monthly Avg Temperature', color='orange')
    plt.title('Temperature Trend Over Time (Africa region proxy)')
    plt.xlabel('Date')
    plt.ylabel('Temperature (°C)')
    plt.legend()
    plt.grid(True)
    plt.show()

    # Seasonal Decomposition
    # Ensure the index is datetime for seasonal_decompose
    data_indexed = data.set_index('Date')
    # Set the frequency of the datetime index to monthly - this should now work after resampling
    data_indexed = data_indexed.asfreq('MS')

    # **Inspect data_indexed before seasonal_decompose**
    print("\nDataFrame shape before seasonal_decompose:", data_indexed.shape)
    print("Data types of data_indexed:", data_indexed.dtypes)
    print("Missing values in data_indexed:", data_indexed.isnull().sum())
    print("First 5 rows of data_indexed:", data_indexed.head())


    decomp = seasonal_decompose(data_indexed['Temperature'], model='additive', period=12)
    decomp.plot()
    plt.show()

    # Correlation Heatmap
    corr = data[['Temperature', 'Year', 'Month']].corr()
    sns.heatmap(corr, annot=True, cmap='coolwarm')
    plt.title('Correlation Heatmap')
    plt.show()

    # SECTION 5: Machine Learning Model
    features = data[['Year', 'Month']]
    target = data['Temperature']

    X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

    # Model 1: Linear Regression
    lr = LinearRegression()
    lr.fit(X_train, y_train)
    lr_preds = lr.predict(X_test)

    # Model 2: Random Forest
    rf = RandomForestRegressor(n_estimators=100, random_state=42)
    rf.fit(X_train, y_train)
    rf_preds = rf.predict(X_test)

    # Evaluation
    print("Linear Regression RMSE:", np.sqrt(mean_squared_error(y_test, lr_preds))) # Removed squared=False and added np.sqrt
    print("Random Forest RMSE:", np.sqrt(mean_squared_error(y_test, rf_preds))) # Removed squared=False and added np.sqrt
    print("Random Forest R2 Score:", r2_score(y_test, rf_preds))

    # SECTION 6: Forecasting Future Temperatures
    future_years = pd.DataFrame({
        'Year': list(range(2025, 2031)) * 12,
        'Month': sorted(list(range(1, 13)) * 6)
    })
    future_preds = rf.predict(future_years)

    # Visualize Predictions
    future_dates = pd.date_range(start='2025-01', end='2030-12', freq='MS')
    plt.figure(figsize=(14, 6))
    plt.plot(future_dates, future_preds, label='Predicted Temp (2025-2030)', color='green')
    plt.title('Forecasted Monthly Temperatures (Africa region proxy)')
    plt.xlabel('Year')
    plt.ylabel('Predicted Temperature (°C)')
    plt.legend()
    plt.grid(True)
    plt.show()

    # SECTION 7: Streamlit App Script
    streamlit_code = '''
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split

st.title("🌍 Climate Change Forecast - Tanzania (Africa Proxy)")

# Load historical data
@st.cache_data # Use st.cache_data instead of st.cache
def load_data():
    url = 'https://raw.githubusercontent.com/datasets/global-temp/master/data/monthly.csv'
    data = pd.read_csv(url)
    # Removed filtering by Source
    data['Date'] = pd.to_datetime(data['Year']) # Corrected column name to 'Year'
    data.rename(columns={'Year': 'Date', 'Mean': 'Temperature'}, inplace=True) # Rename 'Year' to 'Date' and 'Mean' to 'Temperature'
    data.dropna(inplace=True)
    # Resample to monthly average to handle potential duplicate dates from different sources
    data = data.set_index('Date').resample('MS').mean().reset_index()
    data['Year'] = data['Date'].dt.year
    data['Month'] = data['Date'].dt.month
    return data[['Year', 'Month', 'Temperature']] # Ensure only these columns are returned

df = load_data()

# Model Training
features = df[['Year', 'Month']]
target = df['Temperature']
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)
model = RandomForestRegressor(n_estimators=100)
model.fit(X_train, y_train)

# User Input
year = st.slider('Select Year', 2025, 2035, 2025)
month = st.slider('Select Month', 1, 12, 1)
prediction = model.predict([[year, month]])[0]

st.subheader(f"Predicted Avg Temperature for {year}-{month:02d}: 🌡️ {prediction:.2f} °C")

# Plot historical data
if st.checkbox("Show Historical Data"):
    st.line_chart(df.groupby('Year')['Temperature'].mean())
'''

    # Save to file
    with open("climate_app.py", "w") as f:
        f.write(streamlit_code)

    print("✅ Streamlit app script saved as 'climate_app.py'")
else:
    print("Error: Required columns ('Year', 'Mean') not found in the dataset.")

"""# how to uplaod csv file in Google colab"""

